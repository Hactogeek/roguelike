Marvin JEAN

Exercice 1 
	1) #include <stdio.h>
		#include <stdlib.h>

		int add(int a, int b){
			return a+b;
			}

		int main (){
			//arranger
			int n1=5;
			int	n2=3;
			//agir
			int resultat = add (n1,n2);
			//auditer
			if (resultat!=8)printf(" le test a raté");
			else printf(" la somme de %d et %d est %d \n: ",n1, n2, resultat);
		}
		
		Le programme ne marche pas avec des caracteres.
		Et limité par la taille d'un int
		
		
	2) facto 999999 La facto affiche une valeur saisie negative et rend un resultat incoherent
	   facto a   Le programme ne fonctionne pas et dit que la facto de 0 est 1
	   facto 8.5 Le programme ne prends que des valeur entiere
	   facto -6  Le prg ne marche pas avec les negatifs.
	   
Exercice 2
	
	Le programme fonctionne avec les valeurs testé, mais pour aggrandir la plage de test il faut la vrai fonctino factoriel.
	
	Il est possible de faire testé toute les valeur possible en passant l'appel de fonction dans un for qui test toute les valeurs desiré
	
Exercice 3
	
	pascal 5  ->  
 1 
 1  1 
 0  0  1 
 0  0  0  1 
 0  0  0  0  1 
 0  0  0  0  0  1
 
 L'execution de pascal avec n=5
 
 Le probleme vient d'une erreur de calcul des valeurs, dans la fonction inverse_case.
 Il aurait fallut aussi faire des test dans la fonction pour s'assuré de son deroulement.
 Le probleme etait une inversion des parametres lors de l'appel de la fonction. Il aurait etait evitable si on avait fait attention.
 
 Exercice 4 
gcc -fprofile-arcs -ftest-coverage -g  tableau.c -o tableau
./tableau
entrez une phrase : c'est un test
taille de la phrase : 14

TEST ALEATOIRE ------------------
la phrase avec les cases 12 et  4 permutees : c'est un test
la phrase avec les cases  0 et  1 permutees : 'cest un test
la phrase avec les cases  9 et  2 permutees : c'tst un eest
la phrase avec les cases  2 et  6 permutees : c'ust en test
la phrase avec les cases  0 et 10 permutees : e'est un tcst

gcov tableau.c
92.31% of 26 source lines executed in file tableau.c
Creating tableau.c.gcov.

more tableau.c.gcov
                #include <stdio.h>
                #include <stdlib.h>
                #include <time.h>
                #include <string.h>

                void permuter_cases (char *tableau, int i1, int i2, int taille)
          20    {
          20      char inter;

          20      if( (i1 < 0) || (i2 < 0) || (i1 >= taille) || (i2 >= taille)){
      ######        printf("impossible d'effectuer la permutation\n");
      ######        exit(1);
          20      }

          20      inter = tableau[i2];
          20      tableau[i2] = tableau[i1];
          20      tableau[i1] = inter;
                }

                int main(void)
           2    {
           2      int case1, case2, indice, taille;
                  char phrase[512];
                  time_t nb_secondes;

                  // lecture de la phrase
           2      printf("entrez une phrase : ");
           2      fgets(phrase, 512, stdin);

           2      taille = strlen(phrase);
           2      printf("taille de la phrase : %d\n\n", taille);

                  // test aleatoire
           2      printf("TEST ALEATOIRE ------------------\n");
           2      srand(time(&nb_secondes)); //initialisation du generateur de nb aleatoires
          12      for(indice=0; indice < 5; indice++){ // testons 5 fois
          10        case1 = (float)rand()/RAND_MAX * taille; // nb alea. entre 0 et taille
          10        case2 = (float)rand()/RAND_MAX * taille; // nb alea. entre 0 et taille
          10        permuter_cases(phrase, case1, case2, taille);
          10        printf("la phrase avec les cases %2d et %2d permutees : %s", case1, case2, phrase);
          10        permuter_cases(phrase, case2, case1, taille); // on reprend la phrase d'origine
          10      }

           2      return 0;
           2    }
Changé le pseudo aléatoire entre 0 et +5 ne change pas mon taux de couverture.
